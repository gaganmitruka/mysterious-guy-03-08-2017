    MOVE 5 TO CTR
    PERFORM UNTIL CTR GREATER THAN OR EQUAL TO 5
	DISPLAY 'HELLO'
	ADD 1 TO CTR
    END-PERFORM
    DISPLAY 'END OF LOOP 1'
+++++++++++++++
END OF LOOP 1
=============
    MOVE 5 TO CTR
    PERFORM WITH TEST AFTER UNTIL CTR GREATER THAN OR EQUAL TO 5
	DISPLAY 'HELLO'
	ADD 1 TO CTR
    END-PERFORM
    DISPLAY 'END OF LOOP 2'
+++++++++++++++
HELLO
END OF LOOP 2
=============
DATA DIVISION.                                 
WORKING-STORAGE SECTION.                       
01  WS-INPUTS                       VALUE ZERO.
    03  WS-A           PIC 9(02).              
    03  WS-B           PIC 9(02).              
PROCEDURE DIVISION.
MAIN-PARA.                                           
    ACCEPT WS-INPUTS                                 
    PERFORM  UNTIL  WS-INPUTS = 'XXXX'               
       IF WS-A IS NUMERIC AND WS-B IS NUMERIC        
          PERFORM PROCESS-PARA                       
       ELSE                                          
          DISPLAY 'INPUTS ARE NOT NUMERIC'           
       END-IF                                        
       ACCEPT WS-INPUTS                              
    END-PERFORM.                                     
    DISPLAY 'END OF DATA - PROGRAM ENDING. BYE BYE!!'
    STOP RUN.
++++++++++++++
DATA DIVISION.                                 
WORKING-STORAGE SECTION.                       
01  WS-INPUTS                       VALUE ZERO.
    03  WS-A           PIC 9(02).              
    03  WS-B           PIC 9(02).              
PROCEDURE DIVISION.
MAIN-PARA.                                           
    ACCEPT WS-INPUTS                                 
    PERFORM  PROCESS-PARA  UNTIL  WS-INPUTS = 'XXXX'               
    DISPLAY 'END OF DATA - PROGRAM ENDING. BYE BYE!!'
    STOP RUN.
PROCESS-PARA.
    IF WS-A IS NUMERIC AND WS-B IS NUMERIC        
	PERFORM PARA-ADD
	THRU    PARA-DIVIDE                       
    ELSE                                          
	DISPLAY 'INPUTS ARE NOT NUMERIC'           
    END-IF                                        
    ACCEPT WS-INPUTS.                              
=============
DATA DIVISION.                                 
WORKING-STORAGE SECTION.                       
01  WS-INPUTS                       VALUE ZERO.
    03  WS-A           PIC 9(02).              
    03  WS-B           PIC 9(02).              
PROCEDURE DIVISION.
MAIN-PARA.                                           
    PERFORM  PROCESS-PARA  UNTIL  WS-INPUTS = 'XXXX'               
    STOP RUN.
PROCESS-PARA.
    ACCEPT WS-INPUTS
    IF WS-INPUTS NOT = 'XXXX'
       IF WS-A IS NUMERIC AND WS-B IS NUMERIC        
	  PERFORM PARA-ADD
	  THRU    PARA-DIVIDE                       
        ELSE                                          
	   DISPLAY 'INPUTS ARE NOT NUMERIC'
        END-IF
    ELSE
    DISPLAY 'END OF DATA - PROGRAM ENDING. BYE BYE!!'
    END-IF.                                        
=============
//SYSIN    DD   *
1122             
3344             
XXXX             
/*
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    PERFORM VARYING CTR FROM 1 BY 1 UNTIL CTR > 5
	DISPLAY 'HELLO'
    END-PERFORM
    PERFORM VARYING CTR FROM 5 BY -1 UNTIL CTR = 0
	DISPLAY 'HELLO'
    END-PERFORM
++++
    ST-CTR  = 1
    INC-CTR = 2
    END-CTR = 5
    PERFORM VARYING CTR FROM ST-CTR BY INC-CTR UNTIL CTR > END-CTR
	DISPLAY 'HELLO'
    END-PERFORM
==================
    S1
    PERFORM PROCESS-PARA
    THRU    PROCESS-PARA-X
    S2
    STOP RUN.
PROCESS-PARA.
    P1
    P2.
PROCESS-PARA-X.
    EXIT.
==========
S1 P1 P2 S2
==================
    S1
    PERFORM PROCESS-PARA
    THRU    PROCESS-PARA-X
    S2
    STOP RUN.
PROCESS-PARA.
    P1
    IF A = B
	GO TO PROCESS-PARA-X
    END-IF
    P2.
PROCESS-PARA-X.
    EXIT.
++++++++
S1 P1 S2	(if A = B)
S1 P1 P2 S2	(if A NOT = B)
============================================
Level 88 - Condition Names
WORKING-STORAGE SECTION.
01  WS-STATUS	PIC X(01).
PROCEDURE DIVISION.
    IF WS-STATUS = 'S'
	PERFORM PARA-SINGLE
    ELSE
	IF WS-STATUS = 'M'
	   PERFORM PARA-MARRIED
	ELSE
	   PERFORM PARA-OTHER
        END-IF
    END-IF
++++++++++
WORKING-STORAGE SECTION.
01  WS-STATUS	PIC X(01).
    88  SINGLE	VALUE 'S'.
    88  MARRIED VALUE 'M'.
PROCEDURE DIVISION.
    IF SINGLE
	PERFORM PARA-SINGLE
    ELSE
	IF MARRIED
	   PERFORM PARA-MARRIED
	ELSE
	   PERFORM PARA-OTHER
        END-IF
    END-IF
============
WORKING-STORAGE SECTION.
01  WS-ZONE	PIC X(05).
PROCEDURE DIVISION.
    EVALUATE WS-ZONE
	WHEN 'NORTH'
	   PERFORM PARA-NORTH
	WHEN 'SOUTH'
	   PERFORM PARA-SOUTH
	WHEN OTHER
	   PERFORM PARA-OTHER
    END-EVALUATE
============
WORKING-STORAGE SECTION.
01  WS-ZONE		PIC X(05).
    88 NORTH-ZONE	VALUE 'NORTH'.
    88 SOUTH-ZONE	VALUE 'NORTH'.
PROCEDURE DIVISION.
    EVALUATE TRUE
	WHEN NORTH-ZONE
	   PERFORM PARA-NORTH
	WHEN SOUTH-ZONE
	   PERFORM PARA-SOUTH
	WHEN OTHER
	   PERFORM PARA-OTHER
    END-EVALUATE
===============================
WORKING-STORAGE SECTION.
01  WS-CITY	PIC X(10).
PROCEDURE DIVISION.
    EVALUATE WS-CITY ALSO WS-CITY
	WHEN 'PUNE' ALSO 'MUMBAI'
	   PERFORM PARA-WEST
	WHEN 'CHENNAI'
	   PERFORM PARA-SOUTH
	WHEN OTHER
	   PERFORM PARA-OTHER
    END-EVALUATE
++++++++++++++++
WORKING-STORAGE SECTION.
01  WS-CITY	PIC X(10).
    88  WEST-ZONE	VALUE 'PUNE', 'MUMBAI'.
    88  SOUTH-ZONE	VALUE 'CHENNAI', 'HYDERABAD', 'BENGALURU'.
PROCEDURE DIVISION.
    EVALUATE TRUE
	WHEN WEST-ZONE
	   PERFORM PARA-WEST
	WHEN SOUTH-ZONE
	   PERFORM PARA-SOUTH
	WHEN OTHER
	   PERFORM PARA-OTHER
    END-EVALUATE
================
WORKING-STORAGE SECTION.
01  WS-MARKS	PIC 9(03).
PROCEDURE DIVISION.
    IF WS-MARKS > 69
	DISPLAY 'DISTINCTION'
    IF WS-MARKS > 59 AND WS-MARKS < 70
	DISPLAY 'FIRST CLASS'
    IF WS-MARKS > 49 AND WS-MARKS < 60
	DISPLAY 'SECOND CLASS'
    IF WS-MARKS > 39 AND WS-MARKS < 50
	DISPLAY 'PASSED'
    IF WS-MARKS < 40
	DISPLAY 'FAILED'
++++++++
WORKING-STORAGE SECTION.
01  WS-MARKS	PIC 9(03).
    88  DISTINCTION	VALUE 70 THRU 100.
    88  FIRST-CLASS	VALUE 60 THRU 69.
    88  SECOND-CLASS	VALUE 50 THRU 59.
    88  PASS-CLASS	VALUE 40 THRU 49.
    88  FAILED		VALUE 0 THRU 39.
PROCEDURE DIVISION.
    EVALUTE TRUE
	WHEN DISTINCTION	DISPLAY 'PASSED WITH DISTINCTION'
	WHEN FIRST-CLASS	DISPLAY 'PASSED WITH FIRST CLASS'
	WHEN SECOND-CLASS	DISPLAY 'PASSED WITH SECOND CLASS'
	WHEN PASS-CLASS		DISPLAY 'PASSED WITH PASS CLASS'
	WHEN OTHER		DISPLAY 'YOU HAVE FAILED'
    END-EVALUATE
=========================================================
01  WS-INPUTS		VALUE ZERO.
    88  END-OF-DATA	VALUE 'XXXX'.
    03  WS-A		PIC 9(02).
    03  WS-B		PIC 9(02).
ACCEPT WS-INPUTS
PERFORM  UNTIL  END-OF-DATA
//SYSIN DD *
1122
XXXX
/*
============================
ACCEPT WS-A
ACCEPT WS-B
PERFORM  UNTIL  END-OF-DATA
//SYSIN DD *
11
22
XX
XX
/*
=========================================
    PERFORM 3000-CALC
    THRU    3000-CALC-X
    DISPLAY 'CALC OVER'
3000-CALC
    PERFORM PARA-ADD
    PERFORM PARA-SUB
    PERFORM PARA-MULT
    PERFORM PARA-DIV.
PARA-ADD.

PARA-SUB

PARA-MULT

PARA-DIV

3000-CALC-X
    EXIT
=================================================================
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT EMPLOYEE-FILE ASSIGN TO EMPFILE
	ORGANIZATION IS SEQUENTIAL
	ACCESS MODE  IS SEQUENTIAL
	FILE STATUS  IS WS-FILE-STAT.
DATA DIVISION.
FILE SECTION.
FD  EMPLOYEE-FILE
    RECORD CONTAINS 50 CHARACTERS
    RECORDING MODE IS F.
01  EMPLOYEE-RECORD.
    03  EMP-ID		PIC X(05).
    03  EMP-NAME	PIC X(15).
    03  EMP-LOC		PIC X(03).
    03  EMP-DOB		PIC X(08).
    03  EMP-TECH	PIC X(05).
    03  EMP-EARN	PIC 9(05)V99.
    03  EMP-DEDN	PIC 9(05)V99.
WORKING-STORAGE SECTION.
01  WS-FILE-STAT	PIC X(02).
    88  OPEN-SUCCESS		  VALUE '00'.
01  WS-FILE-FLAG	PIC X(01) VALUE 'N'.
    88  END-OF-FILE		  VALUE 'Y'.
PROCEDURE DIVISION.
MAIN-PARA.
    PERFORM 1000-INIT-PARA
    PERFORM 2000-PROCESS-PARA  UNTIL  END-OF-FILE
    PERFORM 3000-END-PARA
    STOP RUN.
1000-INIT-PARA.
    OPEN INPUT EMPLOYEE-FILE
    IF OPEN-SUCCESS
	DISPLAY 'FILE HAS BEEN SUCCESSFULLY OPENED'
    END-IF
    PERFORM 1500-READ-PARA.
1500-READ-PARA.
    READ EMPLOYEE-FILE
	AT END
	   MOVE 'Y' TO WS-FILE-FLAG
	NOT AT END
	   DISPLAY 'FILE READ SUCCESSFULLY'
    END-READ.
2000-PROCESS-PARA.
    DISPLAY 'EMP - ', EMPLOYEE-RECORD
    PERFORM 1500-READ-PARA.
3000-END-PARA.
    CLOSE EMPLOYEE-FILE.
++++++++
//STEP010 EXEC PGM=PROG11
//STEPLIB DD DSN=
//EMPFILE DD DSN=USERID.COBOL.EMPLOYEE,DISP=SHR