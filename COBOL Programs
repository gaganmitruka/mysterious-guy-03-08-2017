R NAME  PROG01
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG01.
0 PROCEDURE DIVISION.
0     DISPLAY '==========='
0     DISPLAY 'HELLO WORLD'
0     DISPLAY '==========='
0     DISPLAY 'CAP GEMINI!' ' ' 'WELCOME TO MAINFRAME WORLD'
0     DISPLAY '==========='
0     DISPLAY 777
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG02
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG02.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUT1          PIC X(10).
0 77  WS-INPUT1          PIC X(10).
0 PROCEDURE DIVISION.
0     ACCEPT WS-INPUT
0     DISPLAY '==========='
0     DISPLAY WS-INPUT
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG03
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG03.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUTS.
0     03  WS-INPUT1      PIC X(10).
0     03  WS-INPUT2      PIC X(10).
0 PROCEDURE DIVISION.
0     ACCEPT WS-INPUTS
0     DISPLAY '==========='
0     DISPLAY WS-INPUTS
0     DISPLAY '==========='
0     DISPLAY WS-INPUT1
0     DISPLAY '==========='
0     DISPLAY WS-INPUT2
0     DISPLAY '==========='
0     DISPLAY WS-INPUT2, ' ', WS-INPUT1
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG04
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG04.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-DATE-6          PIC 9(06).
0 01  WS-DATE-8          PIC 9(08).
0 01  WS-TIME            PIC 9(08).
0 PROCEDURE DIVISION.
0     ACCEPT WS-DATE-6 FROM DATE
0     ACCEPT WS-DATE-8 FROM DATE YYYYMMDD
0     ACCEPT WS-TIME   FROM TIME
0     DISPLAY '==========='
0     DISPLAY 'CURRENT DATE1 ', WS-DATE-6
0     DISPLAY '==========='
0     DISPLAY 'CURRENT DATE2 ', WS-DATE-8
0     DISPLAY '==========='
0     DISPLAY 'CURRENT TIME  ', WS-TIME
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG05
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG05.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUTS.
0     03  WS-INPUT1      PIC X(05).
0     03  WS-INPUT2      PIC X(10).
0 01  WS-OUTPUT1.
0     03  WS-OUT11       PIC X(10).
0     03  WS-OUT12       PIC X(05).
0 01  WS-OUTPUT2.
0     03  WS-OUT21       PIC X(05).
0     03  WS-OUT22       PIC X(10).
0 PROCEDURE DIVISION.
0     ACCEPT WS-INPUTS
0     MOVE WS-INPUT1 TO WS-OUT11, WS-OUT21
0     MOVE WS-INPUT2 TO WS-OUT12, WS-OUT22
0     DISPLAY '==========='
0     DISPLAY 'INPUT ', WS-INPUT1, ' - ', WS-INPUT2
0     DISPLAY '==========='
0     DISPLAY 'OUTPUT1 ', WS-OUT11, ' - ', WS-OUT12
0     DISPLAY '==========='
0     DISPLAY 'OUTPUT2 ', WS-OUT21, ' - ', WS-OUT22
0     DISPLAY '==========='
0     MOVE SPACES TO WS-OUTPUT1
0     MOVE WS-INPUTS TO WS-OUTPUT1
0     DISPLAY '==========='
0     DISPLAY 'OUTPUT1 ', WS-OUTPUT1
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG06
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG06.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUTS.
0     03  WS-A           PIC 9(02).
0     03  WS-B           PIC 9(02).
0 01  WS-OUTPUTS.
0     03  WS-C           PIC 9(03)    VALUE ZERO.
0     03  WS-D           PIC S9(02)   VALUE ZERO.
0     03  WS-E           PIC 9(03)    VALUE ZERO.
0     03  WS-F           PIC 9(02)V99 VALUE ZERO.
0 01  WS-DISPLAY.
0     03  WS-C-O         PIC ZZ9.
0     03  WS-D-O         PIC -9(02).
0     03  WS-E-O         PIC $Z,ZZ9.
0     03  WS-F-O         PIC 9(02).99.
0 PROCEDURE DIVISION.
0     ACCEPT WS-A
0     ACCEPT WS-B
0     INITIALIZE WS-DISPLAY
0     DISPLAY '==========='
0     ADD WS-A TO WS-B GIVING WS-C
0     MOVE WS-C TO WS-C-O
0     DISPLAY 'ADD  ', WS-C-O
0     SUBTRACT WS-A FROM WS-B GIVING WS-D
0     MOVE WS-D TO WS-D-O
0     DISPLAY 'SUB  ', WS-D-O
0     MULTIPLY WS-A BY WS-B GIVING WS-E
0       ON SIZE ERROR
0          DISPLAY 'SIZE ERROR ON MULTIPLICATION'.
0     MOVE WS-E TO WS-E-O
0     DISPLAY 'MULT ', WS-E-O
0     DIVIDE WS-A BY WS-B GIVING WS-F
0     MOVE WS-F TO WS-F-O
0     DISPLAY 'DIV  ', WS-F-O
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG07
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG07.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUTS.
0     03  WS-A           PIC 9(02).
0     03  WS-B           PIC 9(02).
0 01  WS-OUTPUTS.
0     03  WS-C           PIC 9(03)    VALUE ZERO.
0     03  WS-D           PIC S9(02)   VALUE ZERO.
0     03  WS-E           PIC 9(04)    VALUE ZERO.
0     03  WS-F           PIC 9(02)V99 VALUE ZERO.
0 01  WS-DISPLAY.
0     03  WS-C-O         PIC ZZ9.
0     03  WS-D-O         PIC -9(02).
0     03  WS-E-O         PIC $Z,ZZ9.
0     03  WS-F-O         PIC 9(02).99.
0 PROCEDURE DIVISION.
0     ACCEPT WS-A
0     ACCEPT WS-B
0*    IF WS-A IS NUMERIC AND WS-B IS NUMERIC
0     IF WS-A IS NOT NUMERIC OR WS-B IS NOT NUMERIC
0        DISPLAY 'INPUTS ARE NOT NUMERIC'
0        STOP RUN
0     ELSE
0*
0     INITIALIZE WS-DISPLAY
0     DISPLAY '==========='
0     ADD WS-A TO WS-B GIVING WS-C
0     MOVE WS-C TO WS-C-O
0     DISPLAY 'ADD  ', WS-C-O
0     SUBTRACT WS-A FROM WS-B GIVING WS-D
0     MOVE WS-D TO WS-D-O
0     DISPLAY 'SUB  ', WS-D-O
0     MULTIPLY WS-A BY WS-B GIVING WS-E
0     MOVE WS-E TO WS-E-O
0     DISPLAY 'MULT ', WS-E-O
0*
0     IF WS-B = ZERO
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - ZERO CHECK'
0     ELSE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     END-IF.
0*
0     IF WS-B IS POSITIVE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     ELSE
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - POSITIVE CHECK'
0     END-IF.
0*
0     DISPLAY '==========='
0     STOP RUN.
R NAME  PROG09
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG09.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUTS                       VALUE ZERO.
0     03  WS-A           PIC 9(02).
0     03  WS-B           PIC 9(02).
0 01  WS-OUTPUTS.
0     03  WS-C           PIC 9(03)    VALUE ZERO.
0     03  WS-D           PIC S9(02)   VALUE ZERO.
0     03  WS-E           PIC 9(04)    VALUE ZERO.
0     03  WS-F           PIC 9(02)V99 VALUE ZERO.
0 01  WS-DISPLAY.
0     03  WS-C-O         PIC ZZ9.
0     03  WS-D-O         PIC -9(02).
0     03  WS-E-O         PIC $Z,ZZ9.
0     03  WS-F-O         PIC 9(02).99.
0 77  WS-CTR             PIC 9(02) VALUE 1.
0 PROCEDURE DIVISION.
0 MAIN-PARA.
0     ACCEPT WS-INPUTS
0     PERFORM  UNTIL  WS-INPUTS = 'XXXX'
0        IF WS-A IS NUMERIC AND WS-B IS NUMERIC
0           PERFORM PROCESS-PARA
0        ELSE
0           DISPLAY 'INPUTS ARE NOT NUMERIC'
0        END-IF
0        ACCEPT WS-INPUTS
0     END-PERFORM.
0     DISPLAY 'END OF DATA - PROGRAM ENDING. BYE BYE!!'
0     STOP RUN .
0*
0 PROCESS-PARA.
0     DISPLAY 'PROCESS PARA   '     , ' - ', WS-CTR
0     INITIALIZE WS-DISPLAY, WS-OUTPUTS
0     PERFORM PARA-ADD
0     PERFORM PARA-SUBTRACT
0     PERFORM PARA-MULTIPLY
0     PERFORM PARA-DIVIDE.
0     DISPLAY '==========='.
0 PARA-ADD.
0     DISPLAY 'PARA ADD       '     , ' - ', WS-CTR
0     DISPLAY '==========='
0     ADD WS-A TO WS-B GIVING WS-C
0     MOVE WS-C TO WS-C-O
0     DISPLAY 'ADD  ', WS-C-O.
0 PARA-SUBTRACT.
0     DISPLAY 'PARA SUBTRACT  '     , ' - ', WS-CTR
0     SUBTRACT WS-A FROM WS-B GIVING WS-D
0     MOVE WS-D TO WS-D-O
0     DISPLAY 'SUB  ', WS-D-O.
0 PARA-MULTIPLY.
0     DISPLAY 'PARA MULTIPLY  '     , ' - ', WS-CTR
0     MULTIPLY WS-A BY WS-B GIVING WS-E
0     MOVE WS-E TO WS-E-O
0     DISPLAY 'MULT ', WS-E-O.
0*
0 PARA-DIVIDE.
0     DISPLAY 'PARA DIVIDE    '     , ' - ', WS-CTR
0     IF WS-B = ZERO
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - ZERO CHECK'
0     ELSE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     END-IF.
0*
0     IF WS-B IS POSITIVE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     ELSE
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - POSITIVE CHECK'
0     END-IF.
0     ADD 1 TO WS-CTR.
R NAME  PROGA
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROGA.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-GENDER          PIC X(01).
0     88  BOY            VALUE 'B'.
0     88  GIRL           VALUE 'G'.
0 PROCEDURE DIVISION.
0     ACCEPT WS-GENDER
0     EVALUATE TRUE
0        WHEN BOY
0           DISPLAY 'ITS A BOY'
0        WHEN GIRL
0           DISPLAY 'ITS A GIRL'
0        WHEN OTHER
0           DISPLAY 'INVALID GENDER'
0     END-EVALUATE
0     STOP RUN.
R NAME  PROG10
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG10.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-OUTPUTS.
0     03  WS-C           PIC 9(03)    VALUE ZERO.
0     03  WS-D           PIC S9(02)   VALUE ZERO.
0     03  WS-E           PIC 9(04)    VALUE ZERO.
0     03  WS-F           PIC 9(02)V99 VALUE ZERO.
0 01  WS-DISPLAY.
0     03  WS-C-O         PIC ZZ9.
0     03  WS-D-O         PIC -9(02).
0     03  WS-E-O         PIC $Z,ZZ9.
0     03  WS-F-O         PIC 9(02).99.
0 01  WS-INPUTS                       VALUE ZERO.
0     88  END-OF-DATA                 VALUE 'XXXX'.
0     03  WS-A           PIC 9(02).
0     03  WS-B           PIC 9(02).
0 PROCEDURE DIVISION.
0 MAIN-PARA.
0     PERFORM 1000-INIT-PARA
0     THRU    1000-INIT-PARA-X
0     PERFORM 2000-PROCESS-PARA
0     THRU    2000-PROCESS-PARA-X  UNTIL  END-OF-DATA
0     PERFORM 9000-END-PARA
0     THRU    9000-END-PARA-X
0     STOP RUN.
0*
0 1000-INIT-PARA.
0     DISPLAY 'STARTING OF THE PROGRAM'
0     ACCEPT WS-INPUTS.
0 1000-INIT-PARA-X.
0     EXIT.
0*
0 2000-PROCESS-PARA.
0     IF WS-A IS NUMERIC AND WS-B IS NUMERIC
0        DISPLAY 'INPUT = ', WS-INPUTS
0        DISPLAY '------------'
0        PERFORM 3000-CALCULATE-PARA
0        THRU    3000-CALCULATE-PARA-X
0     ELSE
0        DISPLAY 'INPUTS ARE NOT NUMERIC'
0     END-IF
0     ACCEPT WS-INPUTS.
0 2000-PROCESS-PARA-X.
0     EXIT.
0*
0 3000-CALCULATE-PARA.
0     INITIALIZE WS-DISPLAY, WS-OUTPUTS
0     PERFORM 4000-PARA-ADD
0     THRU    4000-PARA-ADD-X
0     PERFORM 5000-PARA-SUBTRACT
0     THRU    5000-PARA-SUBTRACT-X
0     PERFORM 6000-PARA-MULTIPLY
0     THRU    6000-PARA-MULTIPLY-X
0     PERFORM 7000-PARA-DIVIDE
0     THRU    7000-PARA-DIVIDE-X
0     DISPLAY '------------'.
0 3000-CALCULATE-PARA-X.
0     EXIT.
0*
0 4000-PARA-ADD.
0     DISPLAY 'PARA ADD       '
0     ADD WS-A TO WS-B GIVING WS-C
0     MOVE WS-C TO WS-C-O
0     DISPLAY 'ADD  ', WS-C-O.
0 4000-PARA-ADD-X.
0     EXIT.
0*
0 5000-PARA-SUBTRACT.
0     DISPLAY 'PARA SUBTRACT  '
0     SUBTRACT WS-A FROM WS-B GIVING WS-D
0     MOVE WS-D TO WS-D-O
0     DISPLAY 'SUB  ', WS-D-O.
0 5000-PARA-SUBTRACT-X.
0     EXIT.
0*
0 6000-PARA-MULTIPLY.
0     DISPLAY 'PARA MULTIPLY  '
0     MULTIPLY WS-A BY WS-B GIVING WS-E
0     MOVE WS-E TO WS-E-O
0     DISPLAY 'MULT ', WS-E-O.
0 6000-PARA-MULTIPLY-X.
0     EXIT.
0*
0 7000-PARA-DIVIDE.
0     DISPLAY 'PARA DIVIDE    '
0     IF WS-B = ZERO
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - ZERO CHECK'
0     ELSE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     END-IF.
0*
0     IF WS-B IS POSITIVE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     ELSE
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - POSITIVE CHECK'
0     END-IF.
0 7000-PARA-DIVIDE-X.
0     EXIT.
0*
0 9000-END-PARA.
0     DISPLAY 'END OF DATA, QUITTING PROGRAM. BYE, BYE!!'.
0 9000-END-PARA-X.
0     EXIT.
R NAME  PROG11
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG11.
0 ENVIRONMENT DIVISION.
0 INPUT-OUTPUT SECTION.
0 FILE-CONTROL.
0     SELECT EMPLOYEE-FILE ASSIGN TO EMPFILE
0       ORGANIZATION IS SEQUENTIAL
0       ACCESS MODE  IS SEQUENTIAL
0       FILE STATUS  IS WS-FILE-STAT.
0 DATA DIVISION.
0 FILE SECTION.
0 FD  EMPLOYEE-FILE
0     RECORD CONTAINS 50 CHARACTERS
0     RECORDING MODE IS F.
0 01  EMPLOYEE-RECORD.
0     03  EMP-ID       PIC X(05).
0     03  EMP-NAME     PIC X(15).
0     03  EMP-LOC      PIC X(03).
0     03  EMP-DOB      PIC X(08).
0     03  EMP-TECH     PIC X(05).
0     03  EMP-EARN     PIC 9(05)V99.
0     03  EMP-DEDN     PIC 9(05)V99.
0 WORKING-STORAGE SECTION.
0 01  WS-FILE-STAT     PIC X(02).
0     88  OPEN-SUCCESS           VALUE '00'.
0 01  WS-FILE-FLAG     PIC X(01) VALUE 'N'.
0     88  END-OF-FILE            VALUE 'Y'.
0 01  WS-EARN-O        PIC ZZZ,ZZ9.99.
0 01  WS-DEDN-O        PIC ZZZ,ZZ9.99.
0 01  WS-SAL-O         PIC ZZZ,ZZ9.99.
0 01  WS-DOB-O         PIC X(10).
0 01  WS-COUNTERS                VALUE ZERO.
0     03  WS-EMP           PIC 9(02).
0     03  WS-EARN          PIC 9(06)V99.
0     03  WS-DEDN          PIC 9(06)V99.
0     03  WS-SAL           PIC 9(06)V99.
0 PROCEDURE DIVISION.
0 MAIN-PARA.
0     PERFORM 1000-INIT-PARA
0     PERFORM 2000-PROCESS-PARA  UNTIL  END-OF-FILE
0     PERFORM 9000-END-PARA
0     STOP RUN.
0*
0 1000-INIT-PARA.
0     OPEN INPUT EMPLOYEE-FILE
0     DISPLAY 'FILE OPEN FS - ', WS-FILE-STAT
0     IF OPEN-SUCCESS
0        DISPLAY '================================================
0        DISPLAY 'ID    NAME            LOC BIRTH DATE TECH ',
0                '   EARNINGS  DEDUCTION  TOTAL SAL'
0        DISPLAY '------------------------------------------------
0                '---------------------------'
0        PERFORM 1500-READ-PARA
0     ELSE
0        MOVE 'Y' TO WS-FILE-FLAG
0     END-IF.
0*
0 1500-READ-PARA.
0     READ EMPLOYEE-FILE
0        AT END
0           MOVE 'Y' TO WS-FILE-FLAG
0        NOT AT END
0           ADD 1 TO WS-EMP
0     END-READ.
0*
0 2000-PROCESS-PARA.
0     MOVE EMP-EARN TO WS-EARN-O
0     MOVE EMP-DEDN TO WS-DEDN-O
0     COMPUTE WS-SAL = EMP-EARN - EMP-DEDN
0     MOVE WS-SAL   TO WS-SAL-O
0     MOVE EMP-DOB(1:4) TO WS-DOB-O(7:4)
0     MOVE EMP-DOB(5:2) TO WS-DOB-O(4:2)
0     MOVE EMP-DOB(6:2) TO WS-DOB-O(1:2)
0     MOVE '/'          TO WS-DOB-O(3:1)
0     MOVE '/'          TO WS-DOB-O(6:1)
0     DISPLAY           EMP-ID,
0                  ' ', EMP-NAME,
0                  ' ', EMP-LOC,
0                  ' ', WS-DOB-O,
0                  ' ', EMP-TECH,
0                  ' ', WS-EARN-O,
0                  ' ', WS-DEDN-O,
0                  ' ', WS-SAL-O
0     ADD EMP-EARN  TO WS-EARN
0     ADD EMP-DEDN  TO WS-DEDN
0     PERFORM 1500-READ-PARA.
0*
0 9000-END-PARA.
0     DISPLAY '------------------------'
0     DISPLAY 'END FILE REACHED - ', WS-FILE-STAT
0     DISPLAY '------------------------'
0     COMPUTE WS-SAL = WS-EARN - WS-DEDN
0     MOVE WS-EARN TO WS-EARN-O
0     MOVE WS-DEDN TO WS-DEDN-O
0     MOVE WS-SAL  TO WS-SAL-O
0     DISPLAY 'TOTAL EMP =          ',
0             '  ', WS-EMP, '                ',
0             '  ', WS-EARN-O,
0             ' ', WS-DEDN-O,
0             ' ', WS-SAL-O
0     CLOSE EMPLOYEE-FILE.
R NAME  PROG12
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG12.
0 ENVIRONMENT DIVISION.
0 INPUT-OUTPUT SECTION.
0 FILE-CONTROL.
0     SELECT EMPLOYEE-FILE ASSIGN TO EMPFILE
0        ORGANIZATION IS SEQUENTIAL
0        ACCESS MODE  IS SEQUENTIAL
0        FILE STATUS  IS WS-EMP-STAT.
0     SELECT REPORT-FILE ASSIGN TO REPFILE
0        ORGANIZATION IS SEQUENTIAL
0        ACCESS MODE  IS SEQUENTIAL
0        FILE STATUS  IS WS-REP-STAT.
0 DATA DIVISION.
0 FILE SECTION.
0 FD  EMPLOYEE-FILE
0     RECORD CONTAINS 50 CHARACTERS
0     RECORDING MODE IS F.
0     COPY EMPREC.
0 FD  REPORT-FILE
0     RECORD CONTAINS 80 CHARACTERS
0     RECORDING MODE IS F.
00 01  REPORT-RECORD PIC X(80).
0 WORKING-STORAGE SECTION.
0 01  HEADING-LINE1.
0     03  FILLER           PIC X(06) VALUE 'DATE:'.
0     03  P-DATE           PIC X(10) VALUE SPACES.
0     03  FILLER           PIC X(50) VALUE SPACES.
0     03  FILLER           PIC X(06) VALUE 'TIME:'.
0     03  P-TIME.
0         05  WS-TIME-HH   PIC 9(02) VALUE ZERO.
0         05  FILLER       PIC X(01) VALUE ':'.
0         05  WS-TIME-MM   PIC 9(02) VALUE ZERO.
0         05  FILLER       PIC X(01) VALUE ':'.
0         05  WS-TIME-SS   PIC 9(02) VALUE ZERO.
0 01  HEADING-LINE2.
0     03  FILLER           PIC X(20)
0                          VALUE 'LISTING OF EMPLOYEES'.
0     03  FILLER           PIC X(46) VALUE SPACES.
0     03  FILLER           PIC X(06) VALUE 'PAGE:'.
0     03  P-PAGE           PIC Z9    VALUE ZERO.
0 01  HEADING-LINE3.
0     03  FILLER           PIC X(06) VALUE 'ID'.
0     03  FILLER           PIC X(16) VALUE 'NAME'.
0     03  FILLER           PIC X(04) VALUE 'LOC'.
0     03  FILLER           PIC X(11) VALUE 'BIRTH DATE'.
0     03  FILLER           PIC X(06) VALUE 'TECH'.
0     03  FILLER           PIC X(11) VALUE '  EARNINGS '.
0     03  FILLER           PIC X(11) VALUE 'DEDUCTIONS '.
0     03  FILLER           PIC X(10) VALUE ' TOTAL SAL'.
0 01  DETAIL-LINE.
0     03  P-ID             PIC X(05) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-NAME           PIC X(15) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-LOC            PIC X(03) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-DOB            PIC X(10) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-TECH           PIC X(05) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-EARN           PIC ZZZ,ZZ9.99 VALUE ZERO.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-DEDN           PIC ZZZ,ZZ9.99 VALUE ZERO.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-SAL            PIC ZZZ,ZZ9.99 VALUE ZERO.
0     COPY WSREC.
0 01  WS-VARIABLES.
0     03  PAGE-COUNT       PIC 9(02) VALUE ZERO.
0     03  LINE-COUNT       PIC 9(01) VALUE 4.
0     03  WS-SAL           PIC 9(06)V99 VALUE ZERO.
0     03  WS-TOT-EMP       PIC 9(06)V99 VALUE ZERO.
0     03  WS-FILE-FLAG     PIC X(01) VALUE 'N'.
0         88  END-OF-FILE            VALUE 'Y'.
0     03  WS-EMP-STAT      PIC X(02) VALUE SPACES.
0     03  WS-REP-STAT      PIC X(02) VALUE SPACES.
0 PROCEDURE DIVISION.
0 0000-MAIN-PARA.
0     PERFORM 1000-INIT-PARA.
0     PERFORM 2000-PROCESS-PARA  UNTIL  END-OF-FILE
0     PERFORM 9000-END-PARA
0     STOP RUN.
0 1000-INIT-PARA.
0     OPEN INPUT EMPLOYEE-FILE
0     DISPLAY 'EMP OPEN FS ', WS-EMP-STAT
0     OPEN OUTPUT REPORT-FILE.
0     DISPLAY 'REP OPEN FS ', WS-REP-STAT
0     PERFORM 1200-DATE-TIME-PARA.
0     PERFORM 1500-READ-PARA.
0     COPY DATETIME.
0 1500-READ-PARA.
0     READ EMPLOYEE-FILE
0        AT END
0           MOVE 'Y' TO WS-FILE-FLAG
0        NOT AT END
0           ADD 1 TO WS-TOT-EMP
0     END-READ.
0     DISPLAY 'EMP READ FS ', WS-EMP-STAT.
0 2000-PROCESS-PARA.
0     PERFORM 3000-MOVE-PARA
0     IF LINE-COUNT > 3
0        PERFORM 2500-HEADING-PARA
0     END-IF
0     WRITE REPORT-RECORD FROM DETAIL-LINE
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     ADD 1 TO LINE-COUNT
0     PERFORM 1500-READ-PARA.
0 2500-HEADING-PARA.
0     ADD 1 TO PAGE-COUNT
0     MOVE PAGE-COUNT TO P-PAGE
0     WRITE REPORT-RECORD FROM HEADING-LINE1 AFTER PAGE.
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     WRITE REPORT-RECORD FROM HEADING-LINE2.
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     WRITE REPORT-RECORD FROM HEADING-LINE3 AFTER 2.
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     MOVE ZERO TO LINE-COUNT.
0 3000-MOVE-PARA.
0     MOVE EMP-ID  TO P-ID.
0     MOVE EMP-NAME TO P-NAME.
0     MOVE EMP-LOC TO P-LOC.
0     MOVE EMP-TECH TO P-TECH.
0     MOVE EMP-EARN TO P-EARN.
0     MOVE EMP-DEDN TO P-DEDN.
0     MOVE EMP-DOB(1:4) TO P-DOB(7:4)
0     MOVE EMP-DOB(5:2) TO P-DOB(4:2)
0     MOVE EMP-DOB(7:2) TO P-DOB(1:2)
0     MOVE '/'  TO P-DOB(3:1) P-DOB(6:1).
0     COMPUTE WS-SAL = EMP-EARN - EMP-DEDN
0     MOVE WS-SAL  TO P-SAL.
0 9000-END-PARA.
0     CLOSE EMPLOYEE-FILE, REPORT-FILE.
0     DISPLAY 'EMP CLOSE FS ', WS-EMP-STAT.
0     DISPLAY 'REP CLOSE FS ', WS-REP-STAT.
R NAME  PROG13
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG13.
0 ENVIRONMENT DIVISION.
0 INPUT-OUTPUT SECTION.
0 FILE-CONTROL.
0     SELECT EMP-FILE-IN   ASSIGN TO EMPINPUT.
0     SELECT WORK-FILE     ASSIGN TO WRKFILE.
0     SELECT EMPLOYEE-FILE ASSIGN TO EMPFILE
0        ORGANIZATION IS SEQUENTIAL
0        ACCESS MODE  IS SEQUENTIAL
0        FILE STATUS  IS WS-EMP-STAT.
0     SELECT REPORT-FILE ASSIGN TO REPFILE
0        ORGANIZATION IS SEQUENTIAL
0        ACCESS MODE  IS SEQUENTIAL
0        FILE STATUS  IS WS-REP-STAT.
0 DATA DIVISION.
0 FILE SECTION.
0 FD  EMP-FILE-IN
0     RECORD CONTAINS 50 CHARACTERS
0     RECORDING MODE IS F.
0 01  EMP-RECORD.
0     03  IN-EMP-ID       PIC X(05).
0     03  FILLER          PIC X(45).
0 SD  WORK-FILE.
0 01  WORK-RECORD.
0     03  W-EMP-ID        PIC X(05).
0     03  FILLER          PIC X(45).
0 FD  EMPLOYEE-FILE
0     RECORD CONTAINS 50 CHARACTERS
0     RECORDING MODE IS F.
0     COPY EMPREC.
0 FD  REPORT-FILE
0     RECORD CONTAINS 80 CHARACTERS
0     RECORDING MODE IS F.
0 01  REPORT-RECORD PIC X(80).
0 WORKING-STORAGE SECTION.
0 01  HEADING-LINE1.
0     03  FILLER           PIC X(06) VALUE 'DATE:'.
0     03  P-DATE           PIC X(10) VALUE SPACES.
0     03  FILLER           PIC X(50) VALUE SPACES.
0     03  FILLER           PIC X(06) VALUE 'TIME:'.
0     03  P-TIME.
0         05  WS-TIME-HH   PIC 9(02) VALUE ZERO.
0         05  FILLER       PIC X(01) VALUE ':'.
0         05  WS-TIME-MM   PIC 9(02) VALUE ZERO.
0         05  FILLER       PIC X(01) VALUE ':'.
0         05  WS-TIME-SS   PIC 9(02) VALUE ZERO.
0 01  HEADING-LINE2.
0     03  FILLER           PIC X(20)
0                          VALUE 'LISTING OF EMPLOYEES'.
0     03  FILLER           PIC X(46) VALUE SPACES.
0     03  FILLER           PIC X(06) VALUE 'PAGE:'.
0     03  P-PAGE           PIC Z9    VALUE ZERO.
0 01  HEADING-LINE3.
0     03  FILLER           PIC X(06) VALUE 'ID'.
0     03  FILLER           PIC X(16) VALUE 'NAME'.
0     03  FILLER           PIC X(04) VALUE 'LOC'.
0     03  FILLER           PIC X(11) VALUE 'BIRTH DATE'.
0     03  FILLER           PIC X(06) VALUE 'TECH'.
0     03  FILLER           PIC X(11) VALUE '  EARNINGS '.
0     03  FILLER           PIC X(11) VALUE 'DEDUCTIONS '.
0     03  FILLER           PIC X(10) VALUE ' TOTAL SAL'.
0 01  DETAIL-LINE.
0     03  P-ID             PIC X(05) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-NAME           PIC X(15) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-LOC            PIC X(03) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-DOB            PIC X(10) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-TECH           PIC X(05) VALUE SPACES.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-EARN           PIC ZZZ,ZZ9.99 VALUE ZERO.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-DEDN           PIC ZZZ,ZZ9.99 VALUE ZERO.
0     03  FILLER           PIC X(01) VALUE SPACES.
0     03  P-SAL            PIC ZZZ,ZZ9.99 VALUE ZERO.
0     COPY WSREC.
0 01  WS-VARIABLES.
0     03  PAGE-COUNT       PIC 9(02) VALUE ZERO.
0     03  LINE-COUNT       PIC 9(01) VALUE 4.
0     03  WS-SAL           PIC 9(06)V99 VALUE ZERO.
0     03  WS-TOT-EMP       PIC 9(06)V99 VALUE ZERO.
0     03  WS-FILE-FLAG     PIC X(01) VALUE 'N'.
0         88  END-OF-FILE            VALUE 'Y'.
0     03  WS-EMP-STAT      PIC X(02) VALUE SPACES.
0     03  WS-REP-STAT      PIC X(02) VALUE SPACES.
0 PROCEDURE DIVISION.
0 0000-MAIN-PARA.
0     PERFORM 1000-INIT-PARA.
0     PERFORM 2000-PROCESS-PARA  UNTIL  END-OF-FILE
0     PERFORM 9000-END-PARA
0     STOP RUN.
0 1000-INIT-PARA.
0     PERFORM 1111-SORT-PARA
0     OPEN INPUT EMPLOYEE-FILE
0     DISPLAY 'EMP OPEN FS ', WS-EMP-STAT
0     OPEN OUTPUT REPORT-FILE.
0     DISPLAY 'REP OPEN FS ', WS-REP-STAT
0     PERFORM 1200-DATE-TIME-PARA.
0     PERFORM 1500-READ-PARA.
0     COPY DATETIME.
0 1111-SORT-PARA.
0     SORT WORK-FILE
0        ON ASCENDING KEY W-EMP-ID
0           USING EMP-FILE-IN
0           GIVING EMPLOYEE-FILE.
0 1500-READ-PARA.
0     READ EMPLOYEE-FILE
0        AT END
0           MOVE 'Y' TO WS-FILE-FLAG
0        NOT AT END
0           ADD 1 TO WS-TOT-EMP
0     END-READ.
0     DISPLAY 'EMP READ FS ', WS-EMP-STAT.
0 2000-PROCESS-PARA.
0     PERFORM 3000-MOVE-PARA
0     IF LINE-COUNT > 3
0        PERFORM 2500-HEADING-PARA
0     END-IF
0     WRITE REPORT-RECORD FROM DETAIL-LINE
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     ADD 1 TO LINE-COUNT
0     PERFORM 1500-READ-PARA.
0 2500-HEADING-PARA.
0     ADD 1 TO PAGE-COUNT
0     MOVE PAGE-COUNT TO P-PAGE
0     WRITE REPORT-RECORD FROM HEADING-LINE1 AFTER PAGE.
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     WRITE REPORT-RECORD FROM HEADING-LINE2.
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     WRITE REPORT-RECORD FROM HEADING-LINE3 AFTER 2.
0     DISPLAY 'REP WRITE FS ', WS-REP-STAT.
0     MOVE ZERO TO LINE-COUNT.
0 3000-MOVE-PARA.
0     MOVE EMP-ID  TO P-ID.
0     MOVE EMP-NAME TO P-NAME.
0     MOVE EMP-LOC TO P-LOC.
0     MOVE EMP-TECH TO P-TECH.
0     MOVE EMP-EARN TO P-EARN.
0     MOVE EMP-DEDN TO P-DEDN.
0     MOVE EMP-DOB(1:4) TO P-DOB(7:4)
0     MOVE EMP-DOB(5:2) TO P-DOB(4:2)
0     MOVE EMP-DOB(7:2) TO P-DOB(1:2)
0     MOVE '/'  TO P-DOB(3:1) P-DOB(6:1).
0     COMPUTE WS-SAL = EMP-EARN - EMP-DEDN
0     MOVE WS-SAL  TO P-SAL.
0 9000-END-PARA.
0     CLOSE EMPLOYEE-FILE, REPORT-FILE.
0     DISPLAY 'EMP CLOSE FS ', WS-EMP-STAT.
0     DISPLAY 'REP CLOSE FS ', WS-REP-STAT.
R NAME  PROG08
0 IDENTIFICATION DIVISION.
0 PROGRAM-ID. PROG08.
0 DATA DIVISION.
0 WORKING-STORAGE SECTION.
0 01  WS-INPUTS.
0     03  WS-A           PIC 9(02).
0     03  WS-B           PIC 9(02).
0 01  WS-OUTPUTS.
0     03  WS-C           PIC 9(03)    VALUE ZERO.
0     03  WS-D           PIC S9(02)   VALUE ZERO.
0     03  WS-E           PIC 9(04)    VALUE ZERO.
0     03  WS-F           PIC 9(02)V99 VALUE ZERO.
0     03  WS-CTR         PIC 9(01)    VALUE 1.
0 01  WS-DISPLAY.
0     03  WS-C-O         PIC ZZ9.
0     03  WS-D-O         PIC -9(02).
0     03  WS-E-O         PIC $Z,ZZ9.
0     03  WS-F-O         PIC 9(02).99.
0 PROCEDURE DIVISION.
0 MAIN-PARA.
0     DISPLAY 'MAIN PARA      '     , ' - ', WS-CTR
0     ACCEPT WS-A
0     ACCEPT WS-B
0*    IF WS-A IS NUMERIC AND WS-B IS NUMERIC
0        PERFORM PROCESS-PARA
0*       PERFORM PARA-ADD
0*       THRU    PARA-DIVIDE
0*    ELSE
0*       DISPLAY 'INPUTS ARE NOT NUMERIC'
0*    END-IF.
0*    DISPLAY 'CONTROL IS DROPPING DOWN'.
0     STOP RUN .
0*
0 PROCESS-PARA.
0     DISPLAY 'PROCESS PARA   '     , ' - ', WS-CTR
0     INITIALIZE WS-DISPLAY.
0     PERFORM PARA-ADD.
0     PERFORM PARA-SUBTRACT.
0     PERFORM PARA-MULTIPLY.
0     PERFORM PARA-DIVIDE.
0     DISPLAY '==========='.
0     IF WS-CTR > 2
0        DISPLAY 'CONTROL DROPPING DOWN 2ND TIME'
0     END-IF.
0 PARA-ADD.
0     DISPLAY 'PARA ADD       '     , ' - ', WS-CTR
0     DISPLAY '==========='
0     ADD WS-A TO WS-B GIVING WS-C
0     MOVE WS-C TO WS-C-O
0     DISPLAY 'ADD  ', WS-C-O.
0 PARA-SUBTRACT.
0     DISPLAY 'PARA SUBTRACT  '     , ' - ', WS-CTR
0     SUBTRACT WS-A FROM WS-B GIVING WS-D
0     MOVE WS-D TO WS-D-O
0     DISPLAY 'SUB  ', WS-D-O.
0 PARA-MULTIPLY.
0     DISPLAY 'PARA MULTIPLY  '     , ' - ', WS-CTR
0     MULTIPLY WS-A BY WS-B GIVING WS-E
0     MOVE WS-E TO WS-E-O
0     DISPLAY 'MULT ', WS-E-O.
0*
0 PARA-DIVIDE.
0     DISPLAY 'PARA DIVIDE    '     , ' - ', WS-CTR
0     IF WS-B = ZERO
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - ZERO CHECK'
0     ELSE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     END-IF.
0*
0     IF WS-B IS POSITIVE
0        DIVIDE WS-A BY WS-B GIVING WS-F
0        MOVE WS-F TO WS-F-O
0        DISPLAY 'DIV  ', WS-F-O
0     ELSE
0        DISPLAY 'ZERO DIVIDE NOT POSSIBLE - POSITIVE CHECK'
0     END-IF.
0     ADD 1 TO WS-CTR.
